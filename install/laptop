#!/usr/bin/env bash

# Adpated from thoughtbot's laptop script.
# https://github.com/thoughtbot/laptop

laptop_echo() {
  local fmt="$1"; shift

  printf "\\n[LAPTOP] $fmt\\n" "$@"
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

laptop_echo "Sudo mode is active"

if [ ! -d "${HOME}/bin/" ]; then
  mkdir "${HOME}/bin"
fi

# Mac CPU
CPU=$(uname -p)
if [[ "$CPU" == "arm" ]]; then
    HOMEBREW_PREFIX="/opt/homebrew"
else
    HOMEBREW_PREFIX="/usr/local"
fi

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "${LOGNAME}:admin" $HOMEBREW_PREFIX
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "${LOGNAME}:admin" "$HOMEBREW_PREFIX"
fi

update_zsh_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  laptop_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    laptop_echo "Adding '${shell_path}' to /etc/shells"
    sudo sh -c "echo ${shell_path} >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  laptop_echo "Installing Homebrew ..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
fi


eval "$(${HOMEBREW_PREFIX}/bin/brew shellenv)"

if brew list | grep -Fq brew-cask; then
  laptop_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

laptop_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
tap "homebrew/bundle"
tap "homebrew/cask"
tap "homebrew/cask-fonts"
tap "homebrew/cask-versions"
tap "homebrew/core"
tap "homebrew/services"

# Need to install openssl before libyaml
brew "openssl"
brew "openssl@1.1" # wget dependency

brew "autoconf" # asdf dependency
brew "automake" # asdf dependency
brew "coreutils"
brew "gh"
brew "git"
brew "gnupg" # asdf-nodejs dependency
# brew "imagemagick"
brew "libtool" # asdf dependency
brew "libxslt" # asdf dependency
brew "libyaml" # asdf dependency
brew "mas"
brew "openssl"
brew "sqlite"
brew "unixodbc" # asdf dependency
brew "wget"
brew "zlib" # python dependency
brew "zsh"

# homebrew-cask
# https://github.com/caskroom/homebrew-cask
cask "font-inconsolata"
cask "font-fira-code"
cask "iterm2"
EOF

update_zsh_shell

laptop_echo "Configuring asdf version manager..."
if [ ! -d "${HOME}/.asdf" ]; then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.8.1
else
  "${HOME}/.asdf/bin/asdf" update
  "${HOME}/.asdf/bin/asdf" plugin-update --all
fi

install_asdf_plugin() {
  local name="$1"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name"
  fi
}

# shellcheck disable=SC1090
source "${HOME}/.asdf/asdf.sh"
install_asdf_plugin "ruby"
install_asdf_plugin "nodejs"
install_asdf_plugin "python"
install_asdf_plugin "java"

install_asdf_language() {
  local language="$1"
  local version="$2"
  asdf install "$language" "$version"
  asdf global "$language" "$version"
}

laptop_echo "Installing python..."
install_asdf_language "python" "latest"
echo "python --> $(command -v python)"
python -V
echo "pip --> $(command -v pip)"
pip -V

laptop_echo "Installing Ruby..."
install_asdf_language "ruby" "latest"
laptop_echo "Checking which Ruby and Gem installs we are using at this point..."
echo "Ruby --> $(command -v ruby)"
ruby -v
echo "Gem --> $(command -v gem)"
gem -v
gem update --system

laptop_echo "Installing default gems..."
gem install bundler

laptop_echo "Installing Node..."
bash "${HOME}/.asdf/plugins/nodejs/bin/import-release-team-keyring"
install_asdf_language "nodejs" "latest"
echo "Node --> $(command -v node)"
node -v
echo "NPM --> $(command -v npm)"
npm -v

laptop_echo "Installing default npm packages..."
npm install -g sfdx-cli
npm install -g yarn

laptop_echo "Installing Java..."
install_asdf_language "java" "zulu-11.50.19"
source "${HOME}/.asdf/plugins/java/set-java-home.zsh"
echo "Java --> $(command -v java)"
echo $JAVA_HOME

laptop_echo "Laptop installation completed successfully!"